{"version":3,"sources":["types.ts","resources/regions.ts","components/SelectableRegionList.tsx","resources/metrics.ts","components/SelectableMetricList.tsx","components/ComparativeTable/components/TableHeader.tsx","components/ComparativeTable/components/TableCell.tsx","hooks/useDpcData.ts","components/ComparativeTable/components/TableBody.tsx","components/ComparativeTable/index.tsx","components/ComparativeChart/index.tsx","components/DataDisplayChooser.tsx","App.tsx","index.tsx"],"names":["MetricCode","allRegions","code","name","population","area","regionsNameMap","reduce","acc","reg","RegionItem","region","checked","toggler","handleChange","useCallback","event","Number","target","value","className","type","onChange","toLocaleString","SelectableRegionList","selected","map","includes","key","allMetrics","totalCases","description","composedBy","swabs","deceased","totalCurrentlyPositive","totalHospitalized","hospitalizedWithSymptoms","intensiveTherapy","homeInsulation","newCurrentlyPositive","newPositive","dischargedHealed","metricsNameMap","typ","MetricItem","metric","SelectableMetricList","TableHeader","regions","TableCell","metrics","data","getDpcCleaner","row","dayKey","slice","day","emptyDay","codice_regione","useDpcData","useState","roughData","setRoughData","useEffect","fetch","then","response","json","filter","TableBody","allData","typeDescriptions","content","Object","keys","sort","Date","toLocaleDateString","ComparativeTable","colors","r","g","b","points","makeColor","idx","col","datasetMapper","concat","label","makePermutations","perm","fill","borderColor","radius","pointBorderWidth","pointStyle","t","y","ComparativeChart","reference","React","createRef","filteredData","myChart","Chart","current","options","maintainAspectRatio","legend","labels","usePointStyle","scales","xAxes","yAxes","ticks","beginAtZero","datasets","destroy","style","height","ref","NavButton","display","setter","cursor","onClick","DataDisplayChooser","body","setDisplay","App","selectedMetrics","setSelectedMetrics","selectedRegions","setSelectedRegions","toggleMetric","val","toggleRegion","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a15cc0b7.chunk.js","sourcesContent":["export enum MetricCode {\n    hospitalizedWithSymptoms = 'ricoverati_con_sintomi',\n    intensiveTherapy = 'terapia_intensiva',\n    totalHospitalized = 'totale_ospedalizzati',\n    homeInsulation = 'isolamento_domiciliare',\n    totalCurrentlyPositive = 'totale_positivi',\n    newCurrentlyPositive = 'variazione_totale_positivi',\n    newPositive= 'nuovi_positivi',\n    dischargedHealed = 'dimessi_guariti',\n    deceased = 'deceduti',\n    totalCases = 'totale_casi',\n    swabs = 'tamponi',\n}\n\nexport type RegionCode =\n    | 1\n    | 2\n    | 3\n    | 4\n    | 5\n    | 6\n    | 7\n    | 8\n    | 9\n    | 10\n    | 11\n    | 12\n    | 13\n    | 14\n    | 15\n    | 16\n    | 17\n    | 18\n    | 19\n    | 20;\n\nexport type DpcRegionDayData = {\n    data: string;\n    stato: string;\n    codice_regione: RegionCode;\n    denominazione_regione: string;\n    lat: number;\n    long: number;\n} & {\n    [propName in MetricCode]: number;\n};\n\nexport interface Region {\n    code: RegionCode;\n    name: string;\n    population: number;\n    area: number;\n}\n\nexport interface Metric {\n    code: MetricCode;\n    name: string;\n    description: string;\n    composedBy: Metric[];\n}\n\nexport type MetricsValues = Record<MetricCode, number>;\nexport type RegionsValues = Record<RegionCode, MetricsValues>;\nexport type FilteredData = Record<string, RegionsValues>;\n","import { Region, RegionCode } from '../types';\n\nexport const allRegions: Region[] = [\n    {\n        code: 13,\n        name: 'Abruzzo',\n        population: 1311580,\n        area: 10831.84,\n    },\n    {\n        code: 17,\n        name: 'Basilicata',\n        population: 562869,\n        area: 10073.32,\n    },\n    {\n        code: 18,\n        name: 'Calabria',\n        population: 1947131,\n        area: 15221.9,\n    },\n    {\n        code: 15,\n        name: 'Campania',\n        population: 5801692,\n        area: 13670.95,\n    },\n    {\n        code: 8,\n        name: 'Emilia Romagna',\n        population: 4459477,\n        area: 22452.78,\n    },\n    {\n        code: 6,\n        name: 'Friuli Venezia Giulia',\n        population: 1215220,\n        area: 7924.36,\n    },\n    {\n        code: 12,\n        name: 'Lazio',\n        population: 5879082,\n        area: 17232.29,\n    },\n    {\n        code: 7,\n        name: 'Liguria',\n        population: 1550640,\n        area: 5416.21,\n    },\n    {\n        code: 3,\n        name: 'Lombardia',\n        population: 10060574,\n        area: 23863.65,\n    },\n    {\n        code: 11,\n        name: 'Marche',\n        population: 1525271,\n        area: 9401.38,\n    },\n    {\n        code: 14,\n        name: 'Molise',\n        population: 305617,\n        area: 4460.65,\n    },\n    {\n        code: 1,\n        name: 'Piemonte',\n        population: 4356406,\n        area: 25387.07,\n    },\n    {\n        code: 16,\n        name: 'Puglia',\n        population: 4029053,\n        area: 19540.9,\n    },\n    {\n        code: 20,\n        name: 'Sardegna',\n        population: 1639591,\n        area: 24100.02,\n    },\n    {\n        code: 19,\n        name: 'Sicilia',\n        population: 4999891,\n        area: 25832.39,\n    },\n    {\n        code: 9,\n        name: 'Toscana',\n        population: 3729641,\n        area: 22987.04,\n    },\n    {\n        code: 4,\n        name: 'Trentino Alto Adige',\n        population: 1072276,\n        area: 13605.5,\n    },\n    {\n        code: 10,\n        name: 'Umbria',\n        population: 882015,\n        area: 8464.33,\n    },\n    {\n        code: 2,\n        name: \"Valle d'Aosta\",\n        population: 125666,\n        area: 3260.9,\n    },\n    {\n        code: 5,\n        name: 'Veneto',\n        population: 4905854,\n        area: 18345.35,\n    },\n];\n\nexport const regionsNameMap = allRegions.reduce((acc, reg) => {\n    acc[reg.code] = reg.name;\n    return acc;\n}, {} as Record<RegionCode, string>);\n","import { Region, RegionCode } from '../types';\nimport { allRegions } from '../resources/regions';\nimport React, { useCallback } from 'react';\n\nconst RegionItem = ({\n    region,\n    checked,\n    toggler,\n}: {\n    region: Region;\n    checked: boolean;\n    toggler: (code: RegionCode) => void;\n}) => {\n    const handleChange = useCallback(\n        event => toggler(Number(event.target.value) as RegionCode),\n        [toggler]\n    );\n\n    return (\n        <label className=\"list-group-item list-group-item-action p-2 mb-0\">\n            <div className=\"form-check\">\n                <input\n                    type=\"checkbox\"\n                    value={region.code}\n                    className=\"form-check-input\"\n                    checked={checked}\n                    onChange={handleChange}\n                />\n                <strong>{region.name}</strong>\n                <div className={checked ? '' : 'd-none'}>\n                    <small>\n                        <em>Population {region.population.toLocaleString()}</em>\n                        <br />\n                        <em>\n                            Area {region.area.toLocaleString()} Km\n                            <sup>2</sup>\n                        </em>\n                    </small>\n                </div>\n            </div>\n        </label>\n    );\n};\n\nexport const SelectableRegionList = function({\n    selected,\n    toggler,\n}: {\n    selected: RegionCode[];\n    toggler: (code: RegionCode) => void;\n}) {\n    return (\n        <div className=\"SelectableRegionList list-group\">\n            {allRegions.map(region => (\n                <RegionItem\n                    region={region}\n                    checked={selected.includes(region.code)}\n                    toggler={toggler}\n                    key={region.code}\n                />\n            ))}\n        </div>\n    );\n};\n","import { Metric, MetricCode } from '../types';\n\nexport const allMetrics: Metric[] = [\n    {\n        code: MetricCode.totalCases,\n        name: 'Total cases',\n        description: 'Total amount of positive cases.',\n        composedBy: []\n    },\n    {\n        code: MetricCode.swabs,\n        name: 'Total swabs',\n        description: 'Cumulative number of tests performed. Some patients could be tested multiple times.',\n        composedBy: []\n    },\n    {\n        code: MetricCode.deceased,\n        name: 'Deceased',\n        description: 'Cumulative number of deaths.',\n        composedBy: []\n    },\n    {\n        code: MetricCode.totalCurrentlyPositive,\n        name: 'Total currently positive',\n        description: 'Total amount of current positive cases.',\n        composedBy: [\n            {\n                code: MetricCode.totalHospitalized,\n                name: 'Total hospitalized',\n                description: 'Total hospitalised patients.',\n                composedBy: [\n                    {\n                        code: MetricCode.hospitalizedWithSymptoms,\n                        name: 'Hospitalized with symptoms',\n                        description: 'Hospitalised patients with symptoms.',\n                        composedBy: []\n                    },\n                    {\n                        code: MetricCode.intensiveTherapy,\n                        name: 'Intensive therapy',\n                        description: 'Intensive Care.',\n                        composedBy: []\n                    },]\n            },\n            {\n                code: MetricCode.homeInsulation,\n                name: 'Home insulation',\n                description: 'Number of people confined at home.',\n                composedBy: []\n            },]\n    },\n    {\n        code: MetricCode.newCurrentlyPositive,\n        name: 'New currently positive',\n        description: 'Amount of new current positive cases (current total amount of positive cases, minus the number of current positive cases of the previous day).',\n        composedBy: []\n    },\n    {\n        code: MetricCode.newPositive,\n        name: 'New positive',\n        description: 'Amount of new positive cases (total amount of positive cases, minus the number of total positive cases of the previous day).',\n        composedBy: []\n    },\n    {\n        code: MetricCode.dischargedHealed,\n        name: 'Discharged healed',\n        description: 'Cumulative amount of patients fully recovered',\n        composedBy: []\n    },\n];\n\nexport const metricsNameMap = allMetrics.reduce((acc, typ) => {\n    acc[typ.code] = typ.name;\n    return acc;\n}, {} as Record<MetricCode, string>);\n","import { MetricCode, Metric } from '../types';\nimport React, { useCallback, ChangeEvent } from 'react';\nimport { allMetrics } from '../resources/metrics';\n\nconst MetricItem = ({\n    metric,\n    checked,\n    toggler,\n}: {\n    metric: Metric;\n    checked: boolean;\n    toggler: (code: MetricCode) => void;\n}) => {\n    const handleChange = useCallback(\n        (event: ChangeEvent<HTMLInputElement>) =>\n            toggler(event.target.value as MetricCode),\n        [toggler]\n    );\n\n    return (\n        <label className=\"list-group-item list-group-item-action p-2 mb-0\">\n            <div className=\"form-check\">\n                <input\n                    type=\"checkbox\"\n                    value={metric.code}\n                    className=\"form-check-input\"\n                    checked={checked}\n                    onChange={handleChange}\n                />\n                <strong>{metric.name}</strong>\n                <div>\n                    <small>\n                        <em>{metric.description}</em>\n                    </small>\n                </div>\n            </div>\n        </label>\n    );\n};\n\nexport const SelectableMetricList = function({\n    selected,\n    toggler,\n}: {\n    selected: MetricCode[];\n    toggler: (code: MetricCode) => void;\n}) {\n    return (\n        <div className=\"SelectableMetricList list-group\">\n            {allMetrics.map(metric => (\n                <MetricItem\n                    metric={metric}\n                    checked={selected.includes(metric.code)}\n                    toggler={toggler}\n                    key={metric.code}\n                />\n            ))}\n        </div>\n    );\n};\n","import React from 'react';\nimport { RegionCode } from '../../../types';\nimport { regionsNameMap } from '../../../resources/regions';\n\nexport const TableHeader = ({ regions }: { regions: RegionCode[] }) => {\n    return (\n        <thead>\n            <tr>\n                <th className=\"text-left\">Day</th>\n                {regions.map(region => (\n                    <th key={region} className=\"text-right\">{regionsNameMap[region]}</th>\n                ))}\n                <th className=\"text-right\">Metrics</th>\n            </tr>\n        </thead>\n    );\n};\n","import React from 'react';\nimport { MetricCode, RegionCode, RegionsValues } from '../../../types';\n\nexport const TableCell = ({\n    region,\n    metrics,\n    data,\n}: {\n    region: RegionCode;\n    metrics: MetricCode[];\n    data: RegionsValues;\n}) => {\n    return (\n        <td key={region}>\n            {metrics.map(metric => (\n                <div key={metric} className=\"text-right\">{data[region][metric].toLocaleString()}</div>\n            ))}\n        </td>\n    );\n};\n","import {\n    RegionCode,\n    MetricCode,\n    DpcRegionDayData,\n    RegionsValues,\n    MetricsValues,\n    FilteredData,\n} from '../types';\nimport { useState, useEffect } from 'react';\n\nconst getDpcCleaner = (regions: RegionCode[], metrics: MetricCode[]) => {\n    const emptyDay = (\n        regions: RegionCode[],\n        metrics: MetricCode[]\n    ): RegionsValues => {\n        let day = {} as RegionsValues;\n        for (let region of regions) {\n            day[region] = {} as MetricsValues;\n            for (let metric of metrics) {\n                day[region][metric] = 0;\n            }\n        }\n        return day;\n    };\n\n    return (acc: FilteredData, row: DpcRegionDayData): FilteredData => {\n        const dayKey = row.data.slice(0, 10);\n        if (typeof acc[dayKey] === 'undefined') {\n            acc[dayKey] = emptyDay(regions, metrics);\n        }\n        for (let metric of metrics) {\n            acc[dayKey][row.codice_regione][metric] += row[metric];\n        }\n        return acc;\n    };\n};\n\nexport const useDpcData = (\n    regions: RegionCode[],\n    metrics: MetricCode[]\n): FilteredData => {\n    const [roughData, setRoughData] = useState<DpcRegionDayData[]>([]);\n\n    useEffect(() => {\n        const source =\n            'https://raw.githubusercontent.com/pcm-dpc/COVID-19/master/dati-json/dpc-covid19-ita-regioni.json';\n        fetch(source)\n            .then(response => response.json())\n            .then((data: DpcRegionDayData[]) => setRoughData(data));\n    }, [setRoughData]);\n\n    return roughData\n        .filter(row => regions.includes(row.codice_regione))\n        .reduce(getDpcCleaner(regions, metrics), {} as FilteredData);\n};\n","import React from 'react';\nimport { MetricCode, RegionCode} from '../../../types';\nimport { metricsNameMap } from '../../../resources/metrics';\nimport { TableCell } from './TableCell';\nimport { useDpcData } from '../../../hooks/useDpcData';\n\nexport const TableBody = ({\n    regions,\n    metrics,\n}: {\n    regions: RegionCode[];\n    metrics: MetricCode[];\n}) => {\n    const allData = useDpcData(regions, metrics);\n\n    const typeDescriptions = metrics.map(metric => (\n        <div key={metric}>\n            <small>{metricsNameMap[metric]}</small>\n        </div>\n    ));\n\n    const content = Object.keys(allData)\n        .sort()\n        .map((day: string) => {\n            return (\n                <tr key={day}>\n                    <td className=\"text-left\">{new Date(day).toLocaleDateString()}</td>\n                    {regions.map(region => (\n                        <TableCell\n                            key={region}\n                            region={region}\n                            metrics={metrics}\n                            data={allData[day]}\n                        />\n                    ))}\n                    <td className=\"text-right\">{typeDescriptions}</td>\n                </tr>\n            );\n        });\n    return <tbody>{content}</tbody>;\n};\n","import React from 'react';\nimport { MetricCode, RegionCode } from '../../types';\nimport { TableHeader } from './components/TableHeader';\nimport { TableBody } from './components/TableBody';\n\nconst ComparativeTable = ({\n    metrics,\n    regions,\n}: {\n    metrics: MetricCode[];\n    regions: RegionCode[];\n}) => {\n    return (\n        <table className=\"table table-hover table-sm\">\n            <TableHeader regions={regions} />\n            <TableBody regions={regions} metrics={metrics} />\n        </table>\n    );\n};\n\nexport default ComparativeTable;\n","import React, { useEffect } from 'react';\nimport { MetricCode, RegionCode, FilteredData } from '../../types';\nimport { metricsNameMap } from '../../resources/metrics';\nimport { regionsNameMap } from '../../resources/regions';\nimport Chart, { ChartDataSets, ChartPoint, PointStyle } from 'chart.js';\nimport { useDpcData } from '../../hooks/useDpcData';\n\ninterface Permutation {\n    metric: MetricCode;\n    region: RegionCode;\n    label: string;\n}\n\ninterface ColorComponent {\n    r: number;\n    g: number;\n    b: number;\n}\n\nconst colors: ColorComponent[] = [\n    { r: 240, g: 163, b: 255 },\n    { r: 0, g: 117, b: 220 },\n    { r: 153, g: 63, b: 0 },\n    { r: 76, g: 0, b: 92 },\n    { r: 25, g: 25, b: 25 },\n    { r: 0, g: 92, b: 49 },\n    { r: 43, g: 206, b: 72 },\n    { r: 255, g: 204, b: 153 },\n    { r: 128, g: 128, b: 128 },\n    { r: 148, g: 255, b: 181 },\n    { r: 143, g: 124, b: 0 },\n    { r: 157, g: 204, b: 0 },\n    { r: 194, g: 0, b: 136 },\n    { r: 0, g: 51, b: 128 },\n    { r: 255, g: 164, b: 5 },\n    { r: 255, g: 168, b: 187 },\n    { r: 66, g: 102, b: 0 },\n    { r: 255, g: 0, b: 16 },\n    { r: 94, g: 241, b: 242 },\n    { r: 0, g: 153, b: 143 },\n    { r: 224, g: 255, b: 102 },\n    { r: 116, g: 10, b: 255 },\n    { r: 153, g: 0, b: 0 },\n    { r: 255, g: 255, b: 128 },\n    { r: 255, g: 255, b: 0 },\n    { r: 255, g: 80, b: 5 },\n];\n\nlet points = {} as Record<MetricCode, PointStyle>;\npoints[MetricCode.hospitalizedWithSymptoms] = 'rect';\npoints[MetricCode.intensiveTherapy] = 'crossRot';\npoints[MetricCode.totalHospitalized] = 'rect';\npoints[MetricCode.homeInsulation] = 'triangle';\npoints[MetricCode.totalCurrentlyPositive] = 'circle';\npoints[MetricCode.newCurrentlyPositive] = 'rectRot';\npoints[MetricCode.newPositive] = 'dash';\npoints[MetricCode.dischargedHealed] = 'star';\npoints[MetricCode.deceased] = 'cross';\npoints[MetricCode.totalCases] = 'rectRounded';\npoints[MetricCode.swabs] = 'line';\n\nconst makeColor = (idx: number): string => {\n    if (typeof colors[idx] === 'undefined') {\n        return 'rgb(0,0,0)';\n    }\n    const col = colors[idx];\n    return `rgb(${col.r},${col.g},${col.b})`;\n};\n\nconst makePointStyle = (idx: MetricCode): PointStyle => {\n    return typeof points[idx] === 'undefined' ? 'circle' : points[idx];\n};\n\nconst makePermutations = (\n    metrics: MetricCode[],\n    regions: RegionCode[]\n): Permutation[] => {\n    return regions.reduce((acc, region) => {\n        return acc.concat(\n            metrics.map(metric => {\n                return {\n                    metric: metric,\n                    region: region,\n                    label: `${regionsNameMap[region]}, ${metricsNameMap[metric]}`,\n                };\n            })\n        );\n    }, [] as Permutation[]);\n};\n\nconst datasetMapper = (\n    data: FilteredData,\n    metrics: MetricCode[],\n    regions: RegionCode[]\n): ChartDataSets[] => {\n    const permutations = makePermutations(metrics, regions);\n\n    return permutations.map(perm => {\n        return {\n            label: perm.label,\n            fill: false,\n            borderColor: makeColor(perm.region),\n            radius: 5,\n            pointBorderWidth: 3,\n            pointStyle: makePointStyle(perm.metric),\n            data: Object.keys(data).map(\n                (day): ChartPoint => {\n                    return {\n                        t: new Date(day),\n                        y: data[day][perm.region][perm.metric],\n                    };\n                }\n            ),\n        };\n    }, [] as ChartDataSets[]);\n};\n\nconst ComparativeChart = ({\n    metrics,\n    regions,\n}: {\n    metrics: MetricCode[];\n    regions: RegionCode[];\n}) => {\n    const reference = React.createRef<HTMLCanvasElement>();\n\n    const filteredData = useDpcData(regions, metrics);\n\n    useEffect(() => {\n        const myChart = new Chart(reference.current!, {\n            type: 'line',\n            options: {\n                maintainAspectRatio: false,\n                legend: {\n                    labels: {\n                        usePointStyle: true,\n                    },\n                },\n                scales: {\n                    xAxes: [\n                        {\n                            type: 'time',\n                        },\n                    ],\n                    yAxes: [\n                        {\n                            ticks: {\n                                beginAtZero: true,\n                            },\n                        },\n                    ],\n                },\n            },\n            data: {\n                datasets: datasetMapper(filteredData, metrics, regions),\n            },\n        });\n        return () => {\n            myChart.destroy();\n        };\n    }, [reference, filteredData, metrics, regions]);\n\n    return (\n        <div style={{ height: '800px' }}>\n            <canvas ref={reference} />\n        </div>\n    );\n};\n\nexport default ComparativeChart;\n","import React, { useState } from 'react';\nimport { MetricCode, RegionCode } from '../types';\nimport ComparativeTable from './ComparativeTable';\nimport ComparativeChart from './ComparativeChart';\n\nconst NavButton = ({\n    display,\n    value,\n    label,\n    setter,\n}: {\n    display: string;\n    value: string;\n    label: string;\n    setter: (val: string) => void;\n}) => {\n    return (\n        <li className=\"nav-item\">\n            <label\n                style={{ cursor: 'pointer' }}\n                onClick={() => setter(value)}\n                className={\n                    display === value ? 'nav-link m-0 active' : 'nav-link m-0'\n                }\n            >\n                {label}\n            </label>\n        </li>\n    );\n};\n\nexport const DataDisplayChooser = ({\n    metrics,\n    regions,\n}: {\n    metrics: MetricCode[];\n    regions: RegionCode[];\n}) => {\n    const [display, setDisplay] = useState('chart');\n    let body;\n    switch (display) {\n        case 'chart':\n            body = <ComparativeChart metrics={metrics} regions={regions} />;\n            break;\n        case 'table':\n            body = <ComparativeTable metrics={metrics} regions={regions} />;\n            break;\n        default:\n            body = <div>Unknown visualization type required</div>;\n            break;\n    }\n    return (\n        <div className=\"card text-center\">\n            <div className=\"card-header\">\n                <ul className=\"nav nav-tabs card-header-tabs\">\n                    <NavButton\n                        display={display}\n                        value=\"chart\"\n                        label=\"Chart\"\n                        setter={setDisplay}\n                    />\n                    <NavButton\n                        display={display}\n                        value=\"table\"\n                        label=\"Table\"\n                        setter={setDisplay}\n                    />\n                </ul>\n            </div>\n            <div className=\"card-body\">\n                {body}\n            </div>\n        </div>\n    );\n};\n","import React, { useState, useCallback } from 'react';\nimport { RegionCode, MetricCode } from './types';\nimport { SelectableRegionList } from './components/SelectableRegionList';\nimport { SelectableMetricList } from './components/SelectableMetricList';\nimport { DataDisplayChooser } from './components/DataDisplayChooser';\n\nconst App = function() {\n    const [selectedMetrics, setSelectedMetrics] = useState<MetricCode[]>([]);\n    const [selectedRegions, setSelectedRegions] = useState<RegionCode[]>([]);\n\n    const toggleMetric = useCallback(\n        (code: MetricCode) => {\n            setSelectedMetrics(\n                selectedMetrics.includes(code)\n                    ? selectedMetrics.filter(val => val !== code)\n                    : [...selectedMetrics, code]\n            );\n        },\n        [selectedMetrics, setSelectedMetrics]\n    );\n\n    const toggleRegion = useCallback(\n        (code: RegionCode) => {\n            setSelectedRegions(\n                selectedRegions.includes(code)\n                    ? selectedRegions.filter(val => val !== code)\n                    : [...selectedRegions, code]\n            );\n        },\n        [selectedRegions, setSelectedRegions]\n    );\n\n    return (\n        <>\n            <div className=\"covid19it m-3\">\n                <h1 className=\"mb-3\">COVID-19 status and history in Italy</h1>\n                <div className=\"row\">\n                    <div className=\"col-2\">\n                        <SelectableRegionList\n                            selected={selectedRegions}\n                            toggler={toggleRegion}\n                        />\n                    </div>\n                    <div className=\"col-2\">\n                        <SelectableMetricList\n                            selected={selectedMetrics}\n                            toggler={toggleMetric}\n                        />\n                    </div>\n                    <div className=\"col-8\">\n                        <DataDisplayChooser\n                            metrics={selectedMetrics}\n                            regions={selectedRegions}\n                        />\n                    </div>\n                </div>\n            </div>\n        </>\n    );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}